<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
<link href="//netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js"></script>

<br>
<br>

<%= button_to 'Logout', logout_path, method: :delete %>
<%= button_to 'Profile', user_profiles_path, method: :get %>
<%= button_to 'Contacts', contacts_path, method: :get %>

<br><br>

<main class="content">
  <div class="container p-0">

    <h1 class="h3 mb-3">Messages</h1>

    <div class="row g-0">
      <div id="contact_list" class="col-12 col-lg-5 col-xl-3 border-right">
      </div>
      <hr class="d-block d-lg-none mt-1 mb-0">
      <div class="col-12 col-lg-7 col-xl-9">
        <div class="py-2 px-4 border-bottom d-none d-lg-block">
          <div class="d-flex align-items-center py-1">
            <div class="position-relative">
              <img id="img_avatar" src="" class="rounded-circle mr-1" width="40" height="40">
            </div>
            <div class="flex-grow-1 pl-3">
              <strong id="contact_header_name"></strong>
            </div>
          </div>
        </div>

        <div class="position-relative">
          <div id="chat_history_list" class="chat-messages p-4">
          </div>
        </div>

        <div class="flex-grow-0 py-3 px-4 border-top">
          <div class="input-group">
            <input id="ifd_message_input" type="text" onkeyup="sendMessageByEnter(event)" class="form-control" placeholder="Type your message">
            <button class="btn btn-primary" onclick="sendMessage()">Send</button>
          </div>
        </div>

      </div>
    </div>

  </div>
</main>

<script type="text/javascript">
    const currentUserId = <%= Current.user.id %>;

    let targetUserId = null;
    let cachedMessages = [];
    let contactMap = {};

    let lastMessageId = null;

    function sendMessageByEnter(event) {
        if (event.keyCode === 13) {
            sendMessage();
        }
    }

    function sendMessage() {
        let messageInput = document.getElementById("ifd_message_input");
        let message = messageInput.value;

        if (message) {
            const requestOptions = {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    source_user_id: currentUserId,
                    target_user_id: targetUserId,
                    message_content: message
                })
            };

            fetch('/api/v1/messages', requestOptions)
                .then(response => response.json())
                .then(() => messageInput.value = "")
                .then(() => fetchMessages())
        }
    }

    function fetchMessages() {
        let url = '/api/v1/messages/users/' + currentUserId;
        if (lastMessageId) {
            url += '?last_message_id=' + lastMessageId;
        }

        return fetch(url)
            .then(response => response.json())
            .then(function(data) {
                data.forEach(message => {
                    if (lastMessageId && message.id <= lastMessageId) {
                        return;
                    }

                    message.time = new Date(message.created_at).toLocaleString('en-US', {
                        hour: 'numeric',
                        minute: 'numeric',
                        second: 'numeric',
                    });

                    cachedMessages.push(message);

                    if (lastMessageId) {

                        lastMessageId = Math.max(lastMessageId, message.id);
                    } else {
                        lastMessageId = message.id;
                    }
                });

                console.log(cachedMessages);

                showNewMessages();
            });
    }

    function cleanContactList() {
        let contactList = document.getElementById("contact_list");
        while (contactList.children.length) {
            contactList.removeChild(contactList.children[0]);
        }
    }

    function cleanChatHistoryList() {
        let chatHistoryListContainer = document.getElementById("chat_history_list");
        while (chatHistoryListContainer.children.length) {
            chatHistoryListContainer.removeChild(chatHistoryListContainer.children[0]);
        }
    }

    function setupChatHeader(avatarURL, name) {
        let chatHeaderAvatar = document.getElementById("img_avatar");
        chatHeaderAvatar.src = "";
        chatHeaderAvatar.src = avatarURL;

        let chatHeaderName = document.getElementById("contact_header_name");
        chatHeaderName.innerText = name;
    }

    function updateContact(userId, userName, avatarURL, isOnline) {
        // <a href="#" class="list-group-item list-group-item-action border-0">
        // 	<div class="badge bg-success float-right">5</div>
        // 	<div class="d-flex align-items-start">
        // 		<img src="https://bootdey.com/img/Content/avatar/avatar5.png" class="rounded-circle mr-1" alt="Vanessa Tucker" width="40" height="40">
        //  	<div class="flex-grow-1 ml-3">
        // 				Vanessa Tucker
        // 				<div class="small"><span class="fas fa-circle chat-online"></span> Online</div>
        // 		</div>
        // 	</div>
        // </a>

        let contactList = document.getElementById("contact_list");

        let contactContainer = document.getElementById("contactContainer_" + userId);
        if (!contactContainer) {
            contactContainer = document.createElement("a");
            // contactContainer.href = "#";
            contactContainer.id = "contactContainer_" + userId;
            contactContainer.className = "list-group-item list-group-item-action border-0";
            contactContainer.onclick = function() {
                activeUser(userId);

                console.log(userName);

                return false;
            }

            let unreadMessages = document.createElement("div");
            unreadMessages.id = "unreadMessage_" + userId;
            unreadMessages.className = "badge bg-success float-right";
            unreadMessages.textContent = "0";
            unreadMessages.style.display = "none";
            contactContainer.appendChild(unreadMessages);

            let contactDiv = document.createElement("div");
            contactDiv.className = "d-flex align-items-start";
            contactContainer.appendChild(contactDiv);

            let avatarImg = document.createElement("img");
            avatarImg.src = avatarURL;
            avatarImg.setAttribute("alt", userName);
            avatarImg.width = 40;
            avatarImg.height = 40;
            if (isOnline) {
                avatarImg.className = "rounded-circle mr-1";
            } else {
                avatarImg.className = "rounded-circle mr-1 gray-avatar";
            }

            contactDiv.appendChild(avatarImg);

            let nameDiv = document.createElement("div");
            nameDiv.className = "flex-grow-1 ml-3";
            nameDiv.textContent = userName;
            contactDiv.appendChild(nameDiv);

            contactList.appendChild(contactContainer);
        }
    }

    function fetchContactList() {
        fetch('api/v1/contacts/<%= Current.user.id %>')
            .then(response => response.json())
            .then(function (data) {
                cleanContactList();

                data.map(contact => updateContact(contact.contact_id, contact.user_name, contact.avatar_url, contact.online));

                data.forEach(contact => {
                    contactMap[contact.contact_id] = contact;
                });

                console.log(contactMap);

                return data;
            })
            .then(data => data[0] && activeUser(data[0].contact_id));
    }

    function refreshContactList() {
        fetch('api/v1/contacts/<%= Current.user.id %>')
            .then(response => response.json())
            .then(function (data) {
                cleanContactList();

                data.map(contact => updateContact(contact.contact_id, contact.user_name, contact.avatar_url, contact.online));

                data.forEach(contact => {
                    contactMap[contact.contact_id] = contact;
                });
            })
    }

    function activeUser(userId) {
        let contactList = document.getElementById("contact_list");

        for (let i = 0; i < contactList.children.length; i++) {
            let contactItemId = contactList.children[i].id.split("_")[1];

            if (userId == contactItemId) {
                targetUserId = userId;
                let avatarURL = contactList.children[i].children[1].children[0].src;
                let userName = contactList.children[i].children[1].children[1].textContent;

                setupChatHeader(avatarURL, userName);

                cleanChatHistoryList();
            }
        }
    }

    function toMessageListBottom() {
        let scroll_to_bottom = document.getElementById('chat_history_list');
        scroll_to_bottom.scrollTop = scroll_to_bottom.scrollHeight;
    }

    function addMyMessage(message, time) {
        // <div class="chat-message-right pb-4">
        // 	<div>
        // 		<img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
        // 		<div class="text-muted small text-nowrap mt-2">2:33 am</div>
        // 	</div>
        // 	<div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
        // 		<div class="font-weight-bold mb-1">You</div>
        // 		Lorem ipsum dolor sit amet, vis erat denique in, dicunt prodesset te vix.
        // 	</div>
        // </div>
        let chatHistoryListContainer = document.getElementById("chat_history_list");
        let messageContainer = document.createElement("div");
        messageContainer.className = "chat-message-right pb-4";

        let contactDiv = document.createElement("div");
        messageContainer.appendChild(contactDiv);

        let avatarImg = document.createElement("img");
        avatarImg.src = "<%= url_for(Current.user_profile.avatar) %>"
        avatarImg.className = "rounded-circle mr-1";
        avatarImg.alt = "<%= "#{Current.user_profile.first_name} #{Current.user_profile.last_name}" %>";
        avatarImg.width = 40;
        avatarImg.height = 40;
        contactDiv.appendChild(avatarImg);

        let timeDiv = document.createElement("div");
        timeDiv.className = "text-muted small text-nowrap mt-2";
        timeDiv.textContent = time;
        contactDiv.appendChild(timeDiv);

        let messageDiv = document.createElement("div");
        messageDiv.className = "flex-shrink-1 bg-light rounded py-2 px-3 mr-3";
        messageContainer.appendChild(messageDiv);

        let nameDiv = document.createElement("div");
        nameDiv.className = "font-weight-bold mb-1";
        nameDiv.textContent = "You";
        messageDiv.appendChild(nameDiv);

        let messageTextNode = document.createTextNode(message);
        messageDiv.appendChild(messageTextNode);

        chatHistoryListContainer.appendChild(messageContainer);

        toMessageListBottom();
    }

    function addOthersMessage(message, user_name, time, avatarURL) {
        // <div class="chat-message-left pb-4">
        // 	<div>
        // 		<img src="https://bootdey.com/img/Content/avatar/avatar3.png" class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
        // 		<div class="text-muted small text-nowrap mt-2">2:34 am</div>
        // 	</div>
        // 	<div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
        // 		<div class="font-weight-bold mb-1">Sharon Lessman</div>
        // 		Sit meis deleniti eu, pri vidit meliore docendi ut, an eum erat animal commodo.
        // 	</div>
        // </div>

        let chatHistoryListContainer = document.getElementById("chat_history_list");
        let messageContainer = document.createElement("div");
        messageContainer.className = "chat-message-left pb-4";

        let contactDiv = document.createElement("div");
        messageContainer.appendChild(contactDiv);

        let avatarImg = document.createElement("img");
        avatarImg.src = avatarURL;
        avatarImg.className = "rounded-circle mr-1";
        avatarImg.alt = "user";
        avatarImg.width = 40;
        avatarImg.height = 40;
        contactDiv.appendChild(avatarImg);

        let timeDiv = document.createElement("div");
        timeDiv.className = "text-muted small text-nowrap mt-2";
        timeDiv.textContent = time;
        contactDiv.appendChild(timeDiv);

        let messageDiv = document.createElement("div");
        messageDiv.className = "flex-shrink-1 bg-light rounded py-2 px-3 ml-3";
        messageContainer.appendChild(messageDiv);

        let nameDiv = document.createElement("div");
        nameDiv.className = "font-weight-bold mb-1";
        nameDiv.textContent = "User";
        messageDiv.appendChild(nameDiv);

        let messageTextNode = document.createTextNode(message);
        messageDiv.appendChild(messageTextNode);

        chatHistoryListContainer.appendChild(messageContainer);

        toMessageListBottom();
    }

    function showNewMessages() {
        let remainingMessages = [];
        let needShowMessages = [];
        cachedMessages.forEach(message => {
            if (message.source_user_id == targetUserId || message.target_user_id == targetUserId) {
                needShowMessages.push(message);
            } else {
                remainingMessages.push(message);
            }
        })

        cachedMessages = remainingMessages;

        needShowMessages.forEach(message => {
            if (message.source_user_id == currentUserId) {
                addMyMessage(message.message_content, message.time);
            } else {
                let contact = contactMap[message.source_user_id];
                if (contact) {
                    addOthersMessage(message.message_content, contact.user_name, message.time, contact.avatar_url);
                }
            }
        });
    }

    function backendFetchMessages() {
        fetchMessages().then(() => setTimeout(backendFetchMessages, 100));
    }

    window.onload = function() {
        fetchContactList();

        backendFetchMessages();

        setInterval(refreshContactList, 5000);
    };
</script>